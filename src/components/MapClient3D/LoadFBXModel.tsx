"use client";

import React, { useEffect, useState, Suspense } from "react";
import { Canvas, useThree } from "@react-three/fiber";
import { OrbitControls } from "@react-three/drei";
import { FBXLoader } from "three/examples/jsm/loaders/FBXLoader";
import * as THREE from "three";

export default function LoadFBXModel({ filePath }) {
  return (
    <div className="w-full h-[600px] border border-gray-300 rounded-lg">
      <Canvas
        shadows
        camera={{ position: [0, 10, 10], fov: 55 }} // üéØ –ö–∞–º–µ—Ä—ã–≥ 45¬∞ –æ—Ä—á–∏–º ”©–Ω—Ü–≥”©”©—Ä –±–∞–π—Ä–ª—É—É–ª—Å–∞–Ω
        style={{ width: "100%", height: "100%" }}
      >
        <ambientLight intensity={0.1} />
        <directionalLight position={[5, 10, 5]} intensity={1} />
        <Suspense fallback={null}>
          <Model filePath={filePath} />
        </Suspense>

        {/* üëá OrbitControls ‚Äî —Ö—ç—Ä—ç–≥–ª—ç–≥—á zoom/pan —Ö–∏–π—Ö—ç–¥ —Ç—É—Å–ª–∞–Ω–∞ */}
        <OrbitControls
          enableZoom
          enablePan
          minDistance={80}
          maxDistance={200}
          minPolarAngle={Math.PI / 6}   // –¥–æ–æ—à —Ö–∞—Ä—É—É–ª–∞—Ö –¥–æ–æ–¥ —Ö—è–∑–≥–∞–∞—Ä (~30¬∞)
          maxPolarAngle={Math.PI / 2.2} // –¥—ç—ç—à —Ö–∞—Ä—É—É–ª–∞—Ö –¥—ç—ç–¥ —Ö—è–∑–≥–∞–∞—Ä (~81¬∞)
          target={[0, 0, 0]}
        />
      </Canvas>
    </div>
  );
}

function Model({ filePath }) {
  const [object, setObject] = useState(null)
  const { camera, controls } = useThree()

  useEffect(() => {
    const loader = new FBXLoader()

    loader.load(
      filePath,
      (obj) => {
        obj.position.set(0, 50, 50)
        obj.scale.set(0.003, 0.003, 0.003)

        // üîç 1Ô∏è‚É£ FBX coordinate system —à–∞–ª–≥–∞—Ö
        // –ó–∞—Ä–∏–º FBX –Ω—å Z up (Blender), –∑–∞—Ä–∏–º –Ω—å Y up (Unity, 3dsMax)
        const upAxis = obj.up.clone()

        // üîÑ 2Ô∏è‚É£ Coordinate —Å–∏—Å—Ç–µ–º–¥ —Ç—É–ª–≥—É—É—Ä–ª–∞–Ω –∞–≤—Ç–æ–º–∞—Ç–∞–∞—Ä rotation –∑–∞—Å–∞—Ö
        if (Math.abs(upAxis.y) > Math.abs(upAxis.z)) {
          // Y up ‚Üí Blender –≥—ç—Ö –º—ç—Ç, –¥–æ–æ—à —Ö–∞—Ä—Å–∞–Ω –±–∞–π—Ö –º–∞–≥–∞–¥–ª–∞–ª—Ç–∞–π
          obj.rotation.x = -Math.PI / 2
        } else if (Math.abs(upAxis.z) > Math.abs(upAxis.y)) {
          // Z up ‚Üí OK, —Ö—ç–≤–∏–π–Ω
          obj.rotation.x = 0
        }

        // üí° –•—ç—Ä–≤—ç—ç –±—É—Ä—É—É —á–∏–≥–ª—ç–ª—Ç—ç–π —Ö—ç–≤—ç—ç—Ä –±–∞–π–≤–∞–ª –¥–æ–æ—Ä—Ö –º”©—Ä–∏–π–≥ —Ç–∞–π–ª–∂ —à–∞–ª–≥–∞–∞—Ä–∞–π:
        // obj.rotation.y = Math.PI

        // üß± Mesh –±“Ø—Ä—Ç shadow —Ç–æ—Ö–∏—Ä—É—É–ª–∞—Ö
        // obj.traverse((child) => {
        //   if (child.isMesh) {
        //     child.castShadow = true
        //     child.receiveShadow = true
        //   }
        // })

        // üì¶ Bounding box —Ç”©–≤–∏–π–≥ –æ–ª–Ω–æ
        const box = new THREE.Box3().setFromObject(obj)
        const center = box.getCenter(new THREE.Vector3())

        // üé• –ö–∞–º–µ—Ä–∞–∞ 45¬∞ ”©–Ω—Ü–≥”©”©—Ä –±–∞–π—Ä–ª—É—É–ª–∞—Ö
        const distance = 60
        camera.position.set(center.x + distance, center.y + distance, center.z + distance)
        camera.lookAt(center)

        // if (controls) {
        //   controls.target.copy(center)
        //   controls.update()
        // }

        setObject(obj)
      },
      undefined,
      (err) => console.error('FBX –∞—á–∞–∞–ª–∂ —á–∞–¥—Å–∞–Ω–≥“Ø–π:', err)
    )
  }, [filePath, camera, controls])

  return object ? <primitive object={object} /> : null
}


